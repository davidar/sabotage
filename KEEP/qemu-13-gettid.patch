--- qemu-1.3.0.orig/linux-user/syscall.c
+++ qemu-1.3.0/linux-user/syscall.c
@@ -208,11 +208,12 @@
 #endif
 
 #ifdef __NR_gettid
-_syscall0(int, gettid)
+#define __NR_sys_gettid __NR_gettid
+_syscall0(int, sys_gettid)
 #else
 /* This is a replacement for the host gettid() and must return a host
    errno. */
-static int gettid(void) {
+static int sys_gettid(void) {
     return -ENOSYS;
 }
 #endif
@@ -4303,7 +4304,7 @@
     env = info->env;
     thread_env = env;
     ts = (TaskState *)thread_env->opaque;
-    info->tid = gettid();
+    info->tid = sys_gettid();
     env->host_tid = info->tid;
     task_settid(ts);
     if (info->child_tidptr)
@@ -4451,9 +4452,9 @@
                mapping.  We can't repeat the spinlock hack used above because
                the child process gets its own copy of the lock.  */
             if (flags & CLONE_CHILD_SETTID)
-                put_user_u32(gettid(), child_tidptr);
+                put_user_u32(sys_gettid(), child_tidptr);
             if (flags & CLONE_PARENT_SETTID)
-                put_user_u32(gettid(), parent_tidptr);
+                put_user_u32(sys_gettid(), parent_tidptr);
             ts = (TaskState *)env->opaque;
             if (flags & CLONE_SETTLS)
                 cpu_set_tls (env, newtls);
@@ -8258,7 +8259,7 @@
         break;
 #endif
     case TARGET_NR_gettid:
-        ret = get_errno(gettid());
+        ret = get_errno(sys_gettid());
         break;
 #ifdef TARGET_NR_readahead
     case TARGET_NR_readahead:
